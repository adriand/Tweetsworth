
Explain the project, that it was Tom's idea, and so on.

Standard tutorials tend to show you how to build blogs.  I've always felt that was rather pointless.  Why wouldn't you just use WordPress?

Sure, you can learn a lot from building something familiar, but it's more fun to do something different.  That's why, in this tutorial, we're going to show you how to:

<ul>
  <li>Build a slick little web application that integrates with Twitter</li>
  <li>Hack APIs by using cURL and regular expressions instead of API wrappers and XML parsers (though we'll come to rely on those too)</li>
  <li>Learn to use <em>simple, powerful</em> tools like Sinatra and Datamapper instead of large frameworks like Rails to build small, focused web applications</li>
  <li>Spread your web app using social media (we'll try to make it go viral)</li>
</ul>





How To Create A Viral Website - Source Code Included!
=====================================================

In this tutorial, I'm going to focus on key source code elements and design decisions.  I'm not going to outline every single thing I do, or show detailed file structure layouts, or anything of that nature, because you can access the <a href="http://github.com/adriand/Tweetsworth">project's source code</a> itself if you're interested in that.

We're going to be using the just-released Sinatra 1.0 framework for this project:

<code>gem install sinatra</code>

We're also going to be using Datamapper (with SQLite for development, switching to MySQL later on) for the ORM, HAML, SASS and jQuery for views, and whatever we decide is the best solution for accessing Twitter's API when we get to that point.  Go ahead and install those various gems if you don't have them already.

Note that I've never had the opportunity to use SASS before, so please chime in if you see instances where I could improve the way I use it.


<h2>The Foundation</h2>

The meat of the app is tweetsworth.rb.  After building several Sinatra apps, I've developed a preference for a simple file structure and a simple base template for the main application (what you might call the application controller, if you're accustomed to Rails).

The file structure consists of the root folder, where the code for models and the main application goes, plus a folder for the database (/db), static assets (/public) and views (/views).

My application template looks like this (note the comments, which contain notes on some design decisions and idiosyncrasies of the technologies used:)

<script src="http://gist.github.com/332016.js?file=tweetsworth_base.rb"></script>

Next up: creating a quick and dirty layout that's good enough for us to build a functional prototype.  Once again, I rely on a few simple files that I've used and reused time and again for these purposes, making a few tweaks (centering the page and ripping off Twitter's background color).  We're also going to drop in jQuery 1.4 while we're at it.

The comments in this layout demonstrate two little tricks.  By using erb instead of HAML for the Javascript file, we retain Javascript syntax highlighting in our editor of choice, TextMate.  We also implement a simple version of Rails' flash messages, which are frequently useful.

Here's the basic layout, which is sure to change as we continue to develop the application (and particularly when we integrate a proper design):

<script src="http://gist.github.com/332418.js?file=layout.haml"></script>

At this point, everything is in place for us to be able to begin building some real functionality (if you're interested, this point is marked by commit <a href="http://github.com/adriand/Tweetsworth/tree/1f977aae3aba216cf80785f7090e74a67df08e9b">1f977aae3aba216cf80785f7090e74a67df08e9b</a>).


<h2>Getting User Information From Twitter</h2>

Although our goal is to always show a value of zero for the user's account, it will be more convincing - and also more fun to code - if we actually do connect to their Twitter account and retrieve information that we use as the basis for the valuation.  For now, we'll base the valuation on their number of followers and status updates.  This will also lay the groundwork for further integration later on if we like.

Making things nice and easy for us, the <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-users%C2%A0show">Twitter API call for retrieving information on a user</a> does not require authentication.  You can get all the info you need just using cURL:

<code>curl http://api.twitter.com/1/users/show.xml?screen_name=adriandz</code>

This returns XML with all the information we're looking for.

Given how simple this is, three ways of getting this information in our app spring to mind.  The first is to use a Twitter-specific gem like <a href="http://github.com/hayesdavis/grackle">Grackle</a> or <a href="http://twitter.rubyforge.org/">twitter (the gem)</a>.  However, our requirements are so simple that we don't need something with a lot of functionality, nor do we need any OAuth or even basic authentication.

The second is to use a wrapper that will let us simplify the way we access this API.  My current preference for this is <a href="http://httparty.rubyforge.org/">HTTParty</a>.

The third is to just hack something quick and dirty that works with the bare minimum of external requirements.  We've already seen how using cURL lets us get the information we need in XML format.  We can actually skip utilizing an XML parser like Hpricot and just get the data using a regular expression:

<script src="http://gist.github.com/332181.js?file=twitter_info_via_curl.rb"></script>

If we run this from the command line like:

<code>ruby twitter_info_via_curl.rb tomcreighton</code>

We'll get:

Followers: 83<br />
Statuses: 384

Supply your Twitter username as the last argument (in place of <em>tomcreighton</em>) if you'd like to try this on your own account.

That's about as simple as it gets.  This is a nice technique for hacking APIs when the data you are interested in is simple, easy to parse, and doesn't include collections of items.  I've even used this for hacking SOAP services, by passing in the -H parameter to cURL:

<code>-H "Content-Type: application/soap+xml;charset=UTF-8"</code>

That said, although this works for our purposes, it won't serve us well if we want to add more interesting Twitter functionality later on.  We'll use HTTParty instead.

Helpfully, the <a href="http://httparty.rubyforge.org/">documentation for HTTParty</a> begins with a Twitter example, although it uses authentication, which we don't need.  Let's add httparty to the list of required gems (require 'httparty') and code up the simplest possible Twitter client that will be useful for our purposes, which we will drop into models.rb:

<script src="http://gist.github.com/332459.js?file=twitter.rb"></script>


<h2>Putting It Together</h2>

Now that we've figured out how to retrieve user information from Twitter, it's time to start putting it all together.  We're going to need to present the user with a form, retrieve their user information when they submit their Twitter username (or show a failure message if we cannot do so), and then start displaying values.

We'll also save valid Twitter usernames in our database so that we can use them, for instance to show other people whose accounts have recently been (under) valued, or perhaps so that we can send them a tweet later on about the app.

For that, we need a model:



Note that as soon as I've created this model, I stop the application from running.  Then, in the main app, I comment out the DataMapper upgrade method:

<code># DataMapper.auto_upgrade!</code>

And uncomment the migrate method:

<code>DataMapper.auto_migrate!</code>

Then I start the application back up again.  This will add in a table for my new model.  Subsequently, I change these lines back the way they were, so that we're back to upgrading.

We also need a form:



And lastly, we need some logic in the main application to tie it all together:







